#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESS 10

// Process structure
struct Process {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
};

// Function to perform priority scheduling
void priorityScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int totalRemaining = 0;

    // Calculate total remaining time
    for (int i = 0; i < n; i++) {
        totalRemaining += processes[i].burst_time;
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Priority Scheduling
    while (totalRemaining > 0) {
        int highestPriority = -1;
        int selectedProcess = -1;

        // Find process with highest priority at current time
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && processes[i].remaining_time > 0) {
                if (highestPriority == -1 || processes[i].priority < highestPriority) {
                    highestPriority = processes[i].priority;
                    selectedProcess = i;
                }
            }
        }

        // No process is ready at the current time
        if (selectedProcess == -1) {
            currentTime++;
        } else {
            // Execute the selected process for 1 unit of time
            processes[selectedProcess].remaining_time--;
            currentTime++;
            totalRemaining--;

            // Print the execution of the process
            printf("Time %d: Process %d\n", currentTime, processes[selectedProcess].process_id);
        }
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    if (n > MAX_PROCESS) {
        printf("Number of processes exceeds the maximum limit.\n");
        return 1;
    }

    struct Process processes[MAX_PROCESS];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter details for Process %d:\n", i + 1);
        processes[i].process_id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
    }

    // Perform Priority Scheduling
    priorityScheduling(processes, n);

    return 0;
}
