#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

// Define a structure for the message
struct Message {
    long mtype;  // Message type (must be greater than 0)
    char mtext[100];  // Message data
};

int main() {
    int msgid;
    key_t key = 5678;  // Key for creating the message queue

    // Create a message queue or get the identifier of an existing one
    if ((msgid = msgget(key, IPC_CREAT | 0666)) < 0) {
        perror("msgget");
        exit(1);
    }

    // Fork a child process
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    }

    // Child process (sender)
    if (pid == 0) {
        struct Message message;
        message.mtype = 1;  // Message type must be greater than 0

        // Send messages to the message queue
        for (int i = 1; i <= 5; i++) {
            sprintf(message.mtext, "Message %d from child", i);

            if (msgsnd(msgid, &message, sizeof(message.mtext), 0) == -1) {
                perror("msgsnd");
                exit(1);
            }

            printf("Child Process: Sent Message %d\n", i);
        }
    }
    // Parent process (receiver)
    else {
        struct Message message;

        // Receive messages from the message queue
        for (int i = 1; i <= 5; i++) {
            if (msgrcv(msgid, &message, sizeof(message.mtext), 1, 0) == -1) {
                perror("msgrcv");
                exit(1);
            }

            printf("Parent Process: Received Message: %s\n", message.mtext);
        }

        // Remove the message queue
        if (msgctl(msgid, IPC_RMID, NULL) == -1) {
            perror("msgctl");
            exit(1);
        }
    }

    return 0;
}
