#include <stdio.h>

// Structure to represent a process
struct Process {
    int processID;  // Process ID
    int burstTime;  // Burst time
    int remainingTime; // Remaining burst time
};

// Function to simulate Round Robin scheduling
void roundRobin(struct Process processes[], int n, int timeQuantum) {
    int currentTime = 0; // Current time

    // Keep track of completion status of each process
    int completionStatus[n];
    for (int i = 0; i < n; i++) {
        processes[i].remainingTime = processes[i].burstTime;
        completionStatus[i] = 0; // 0 indicates process is not completed
    }

    // Simulate the scheduling until all processes are completed
    while (1) {
        int allCompleted = 1; // Assume all processes are completed

        // Iterate through each process
        for (int i = 0; i < n; i++) {
            if (completionStatus[i] == 0) {
                allCompleted = 0; // There is at least one process not completed

                // Execute the process for the time quantum or the remaining burst time, whichever is smaller
                int executeTime = (processes[i].remainingTime < timeQuantum) ? processes[i].remainingTime : timeQuantum;
                currentTime += executeTime;
                processes[i].remainingTime -= executeTime;

                // If the process is completed
                if (processes[i].remainingTime == 0) {
                    completionStatus[i] = 1; // Mark the process as completed
                    printf("Process P%d completed at time %d\n", processes[i].processID, currentTime);
                } else {
                    printf("Process P%d executed at time %d\n", processes[i].processID, currentTime);
                }
            }
        }

        if (allCompleted == 1) {
            break; // All processes are completed, exit the loop
        }
    }
}

int main() {
    // Number of processes
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input burst time for each process
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    // Time quantum for Round Robin scheduling
    int timeQuantum;
    printf("Enter the time quantum for Round Robin scheduling: ");
    scanf("%d", &timeQuantum);

    // Perform Round Robin scheduling
    roundRobin(processes, n, timeQuantum);

    return 0;
}
