#include<stdio.h>

// Structure to represent a process
struct Process {
    int processID; // Process ID
    int burstTime; // Burst time
};

// Function to perform Non-Preemptive SJF scheduling
void nonPreemptiveSJF(struct Process processes[], int n) {
    // Sort processes based on burst time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                // Swap processes
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Display the order of execution
    printf("Order of execution: ");
    for (int i = 0; i < n; i++) {
        printf("P%d ", processes[i].processID);
    }
    printf("\n");

    // Calculate waiting time and turnaround time
    int waitingTime[n], turnaroundTime[n];
    waitingTime[0] = 0; // Waiting time for the first process is 0

    // Calculate waiting time for the rest of the processes
    for (int i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + processes[i - 1].burstTime;
    }

    // Calculate turnaround time for all processes
    for (int i = 0; i < n; i++) {
        turnaroundTime[i] = waitingTime[i] + processes[i].burstTime;
    }

    // Display process details and average waiting time
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    float totalWaitingTime = 0, totalTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }

    // Display average waiting time
    float averageWaitingTime = totalWaitingTime / n;
    printf("\nAverage Waiting Time: %.2f\n", averageWaitingTime);
}

int main() {
    // Number of processes
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input burst time for each process
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    // Perform Non-Preemptive SJF scheduling
    nonPreemptiveSJF(processes, n);

    return 0;
}
