#include <stdio.h>
#include <stdlib.h>

// Define structure for employee details
struct Employee {
    int empId;
    char empName[50];
    float empSalary;
};

// Function prototypes
void addRecord(FILE *file);
void displayRecords(FILE *file);
void updateRecord(FILE *file, int empId);
void deleteRecord(FILE *file, int empId);

int main() {
    FILE *file;
    int choice;
    
    // Open the file in binary mode with read and write permissions
    file = fopen("employee.dat", "rb+");
    
    if (file == NULL) {
        // If the file doesn't exist, create a new file
        file = fopen("employee.dat", "wb+");
        if (file == NULL) {
            printf("Error opening file!");
            return 1;
        }
    }
    
    do {
        // Display menu
        printf("\n1. Add Record\n");
        printf("2. Display Records\n");
        printf("3. Update Record\n");
        printf("4. Delete Record\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                addRecord(file);
                break;
            case 2:
                displayRecords(file);
                break;
            case 3: {
                int empId;
                printf("Enter the employee ID to update: ");
                scanf("%d", &empId);
                updateRecord(file, empId);
                break;
            }
            case 4: {
                int empId;
                printf("Enter the employee ID to delete: ");
                scanf("%d", &empId);
                deleteRecord(file, empId);
                break;
            }
            case 5:
                break;
            default:
                printf("Invalid choice! Please enter a number between 1 and 5.\n");
        }
    } while (choice != 5);

    // Close the file
    fclose(file);

    return 0;
}

void addRecord(FILE *file) {
    struct Employee emp;
    
    // Move the file pointer to the end to append new records
    fseek(file, 0, SEEK_END);
    
    // Get employee details from the user
    printf("Enter employee ID: ");
    scanf("%d", &emp.empId);
    printf("Enter employee name: ");
    scanf("%s", emp.empName);
    printf("Enter employee salary: ");
    scanf("%f", &emp.empSalary);
    
    // Write the employee details to the file
    fwrite(&emp, sizeof(struct Employee), 1, file);
    
    printf("Record added successfully!\n");
}

void displayRecords(FILE *file) {
    struct Employee emp;
    
    // Move the file pointer to the beginning
    fseek(file, 0, SEEK_SET);
    
    // Read and display all records
    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        printf("Employee ID: %d, Name: %s, Salary: %.2f\n", emp.empId, emp.empName, emp.empSalary);
    }
}

void updateRecord(FILE *file, int empId) {
    struct Employee emp;
    int found = 0;
    
    // Move the file pointer to the beginning
    fseek(file, 0, SEEK_SET);
    
    // Search for the record with the given employee ID
    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        if (emp.empId == empId) {
            // Display the existing details
            printf("Existing details:\n");
            printf("Employee ID: %d, Name: %s, Salary: %.2f\n", emp.empId, emp.empName, emp.empSalary);
            
            // Get the updated details from the user
            printf("Enter new name: ");
            scanf("%s", emp.empName);
            printf("Enter new salary: ");
            scanf("%f", &emp.empSalary);
            
            // Move the file pointer back to update the record
            fseek(file, -sizeof(struct Employee), SEEK_CUR);
            
            // Write the updated record to the file
            fwrite(&emp, sizeof(struct Employee), 1, file);
            
            printf("Record updated successfully!\n");
            found = 1;
            break;
        }
    }
    
    if (!found) {
        printf("Record not found!\n");
    }
}

void deleteRecord(FILE *file, int empId) {
    struct Employee emp;
    FILE *tempFile;
    
    // Open a temporary file in write mode
    tempFile = fopen("temp.dat", "wb");
    
    if (tempFile == NULL) {
        printf("Error creating temporary file!");
        return;
    }
    
    // Move the file pointer to the beginning
    fseek(file, 0, SEEK_SET);
    
    // Copy all records to the temporary file except the one to be deleted
    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        if (emp.empId != empId) {
            fwrite(&emp, sizeof(struct Employee), 1, tempFile);
        }
    }
    
    // Close both files
    fclose(file);
    fclose(tempFile);
    
    // Remove the original file
    remove("employee.dat");
    
    // Rename the temporary file to the original file name
    rename("temp.dat", "employee.dat");
    
    printf("Record deleted successfully!\n");
}
