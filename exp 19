#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Shared data
int shared_data = 0;

// Mutex lock
pthread_mutex_t mutex;

// Function to be executed by all threads
void *increment_shared_data(void *arg) {
    for (int i = 0; i < 5; ++i) {
        // Lock the mutex before accessing shared data
        pthread_mutex_lock(&mutex);

        // Critical section: Access and modify shared data
        shared_data++;
        printf("Thread %ld: Shared Data = %d\n", (long)arg, shared_data);

        // Unlock the mutex after the critical section
        pthread_mutex_unlock(&mutex);

        // Sleep for a short time to simulate work
        usleep(rand() % 1000000);
    }

    pthread_exit(NULL);
}

int main() {
    // Initialize the mutex
    pthread_mutex_init(&mutex, NULL);

    // Create three threads
    pthread_t thread1, thread2, thread3;
    pthread_create(&thread1, NULL, increment_shared_data, (void *)1);
    pthread_create(&thread2, NULL, increment_shared_data, (void *)2);
    pthread_create(&thread3, NULL, increment_shared_data, (void *)3);

    // Wait for threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);
    pthread_join(thread3, NULL);

    // Destroy the mutex
    pthread_mutex_destroy(&mutex);

    return 0;
}
