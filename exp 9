#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024

// Structure to hold data shared between processes
struct SharedData {
    int value;
    // Add more variables as needed
};

int main() {
    int shmId;
    key_t key = 1234; // A key for creating or accessing the shared memory segment
    struct SharedData *sharedData;

    // Create a shared memory segment
    if ((shmId = shmget(key, sizeof(struct SharedData), IPC_CREAT | 0666)) < 0) {
        perror("shmget");
        exit(1);
    }

    // Attach the shared memory segment to the address space of this process
    if ((sharedData = shmat(shmId, NULL, 0)) == (struct SharedData *) -1) {
        perror("shmat");
        exit(1);
    }

    // Initialize shared data
    sharedData->value = 0;

    // Fork a child process
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    } else if (pid == 0) {
        // Child process
        printf("Child process: Incrementing shared value\n");
        sleep(2); // Simulate some work

        // Access the shared memory and increment the value
        sharedData->value++;
        printf("Child process: New value = %d\n", sharedData->value);

        // Detach the shared memory segment
        if (shmdt(sharedData) == -1) {
            perror("shmdt");
            exit(1);
        }

    } else {
        // Parent process
        printf("Parent process: Waiting for the child to finish\n");
        wait(NULL); // Wait for the child to finish

        // Access the shared memory and print the final value
        printf("Parent process: Final value = %d\n", sharedData->value);

        // Detach the shared memory segment
        if (shmdt(sharedData) == -1) {
            perror("shmdt");
            exit(1);
        }

        // Remove the shared memory segment
        if (shmctl(shmId, IPC_RMID, NULL) == -1) {
            perror("shmctl");
            exit(1);
        }
    }

    return 0;
}
