#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2

pthread_mutex_t mutex;
pthread_cond_t condition[NUM_PHILOSOPHERS];
int state[NUM_PHILOSOPHERS];

void think(int philosopherID) {
    printf("Philosopher %d is thinking.\n", philosopherID);
    sleep(rand() % 3 + 1);  // Simulate thinking by sleeping for a random time
}

void eat(int philosopherID) {
    printf("Philosopher %d is eating.\n", philosopherID);
    sleep(rand() % 3 + 1);  // Simulate eating by sleeping for a random time
}

void test(int philosopherID) {
    if (state[philosopherID] == HUNGRY &&
        state[(philosopherID + 1) % NUM_PHILOSOPHERS] != EATING &&
        state[(philosopherID + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS] != EATING) {
        state[philosopherID] = EATING;
        printf("Philosopher %d picks up both forks and starts eating.\n", philosopherID);
        pthread_cond_signal(&condition[philosopherID]);
    }
}

void takeForks(int philosopherID) {
    pthread_mutex_lock(&mutex);
    state[philosopherID] = HUNGRY;
    printf("Philosopher %d is hungry and tries to pick up forks.\n", philosopherID);
    test(philosopherID);
    while (state[philosopherID] != EATING) {
        pthread_cond_wait(&condition[philosopherID], &mutex);
    }
    pthread_mutex_unlock(&mutex);
}

void putForks(int philosopherID) {
    pthread_mutex_lock(&mutex);
    state[philosopherID] = THINKING;
    printf("Philosopher %d puts down forks and starts thinking.\n", philosopherID);
    test((philosopherID + 1) % NUM_PHILOSOPHERS);
    test((philosopherID + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS);
    pthread_mutex_unlock(&mutex);
}

void *philosopher(void *arg) {
    int philosopherID = *(int *)arg;

    while (1) {
        think(philosopherID);
        takeForks(philosopherID);
        eat(philosopherID);
        putForks(philosopherID);
    }
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosopherIDs[NUM_PHILOSOPHERS];

    pthread_mutex_init(&mutex, NULL);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_cond_init(&condition[i], NULL);
        philosopherIDs[i] = i;
        pthread_create(&threads[i], NULL, philosopher, &philosopherIDs[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex);

    return 0;
}
