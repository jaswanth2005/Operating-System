#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 100

typedef struct {
    int id;
    int size;
} Block;

void initializeMemory(int memory[], int size);
void displayMemory(int memory[], int size);
void firstFit(int memory[], int size, Block process);
void bestFit(int memory[], int size, Block process);
void worstFit(int memory[], int size, Block process);

int main() {
    int memory[MEMORY_SIZE];
    initializeMemory(memory, MEMORY_SIZE);

    Block processes[] = {{1, 20}, {2, 10}, {3, 30}, {4, 5}};

    printf("Initial Memory State:\n");
    displayMemory(memory, MEMORY_SIZE);

    for (int i = 0; i < sizeof(processes) / sizeof(processes[0]); ++i) {
        printf("\nProcess %d (Size: %d)\n", processes[i].id, processes[i].size);
        printf("First Fit:\n");
        firstFit(memory, MEMORY_SIZE, processes[i);
        displayMemory(memory, MEMORY_SIZE);

        initializeMemory(memory, MEMORY_SIZE);  // Reset memory for the next strategy

        printf("\nProcess %d (Size: %d)\n", processes[i].id, processes[i].size);
        printf("Best Fit:\n");
        bestFit(memory, MEMORY_SIZE, processes[i]);
        displayMemory(memory, MEMORY_SIZE);

        initializeMemory(memory, MEMORY_SIZE);  // Reset memory for the next strategy

        printf("\nProcess %d (Size: %d)\n", processes[i].id, processes[i].size);
        printf("Worst Fit:\n");
        worstFit(memory, MEMORY_SIZE, processes[i]);
        displayMemory(memory, MEMORY_SIZE);
    }

    return 0;
}

void initializeMemory(int memory[], int size) {
    for (int i = 0; i < size; ++i) {
        memory[i] = -1;  // -1 indicates free memory
    }
}

void displayMemory(int memory[], int size) {
    for (int i = 0; i < size; ++i) {
        if (memory[i] == -1) {
            printf("[ ] ");  // Empty memory block
        } else {
            printf("[%d] ", memory[i]);  // Occupied memory block
        }
    }
    printf("\n");
}

void firstFit(int memory[], int size, Block process) {
    for (int i = 0; i < size; ++i) {
        if (memory[i] == -1 && i + process.size <= size) {
            // Allocate memory for the process
            for (int j = 0; j < process.size; ++j) {
                memory[i + j] = process.id;
            }
            break;
        }
    }
}

void bestFit(int memory[], int size, Block process) {
    // Find the best fit block
    int bestFitStart = -1;
    int bestFitSize = size + 1;

    for (int i = 0; i < size; ++i) {
        int blockSize = 0;

        while (memory[i] == -1 && i < size) {
            blockSize++;
            i++;
        }

        if (blockSize >= process.size && blockSize < bestFitSize) {
            bestFitStart = i - blockSize;
            bestFitSize = blockSize;
        }
    }

    // Allocate memory for the process
    for (int i = bestFitStart; i < bestFitStart + process.size; ++i) {
        memory[i] = process.id;
    }
}

void worstFit(int memory[], int size, Block process) {
    // Find the worst fit block
    int worstFitStart = -1;
    int worstFitSize = -1;

    for (int i = 0; i < size; ++i) {
        int blockSize = 0;

        while (memory[i] == -1 && i < size) {
            blockSize++;
            i++;
        }

        if (blockSize >= process.size && blockSize > worstFitSize) {
            worstFitStart = i - blockSize;
            worstFitSize = blockSize;
        }
    }

    // Allocate memory for the process
    for (int i = worstFitStart; i < worstFitStart + process.size; ++i) {
        memory[i] = process.id;
    }
}
