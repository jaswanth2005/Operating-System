#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5

// Shared variables
int buffer[BUFFER_SIZE];
int in = 0, out = 0;

// Semaphores
sem_t mutex, full, empty;

// Producer function
void *producer(void *arg) {
    int item;
    while (1) {
        // Produce item
        item = rand() % 100;

        // Wait for an empty slot in the buffer
        sem_wait(&empty);
        // Wait for exclusive access to the buffer
        sem_wait(&mutex);

        // Produce item into the buffer
        buffer[in] = item;
        printf("Produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;

        // Release the buffer
        sem_post(&mutex);
        // Signal that the buffer is no longer empty
        sem_post(&full);

        // Sleep for a random time to simulate variable production time
        usleep(rand() % 1000000);
    }
}

// Consumer function
void *consumer(void *arg) {
    int item;
    while (1) {
        // Wait for a full slot in the buffer
        sem_wait(&full);
        // Wait for exclusive access to the buffer
        sem_wait(&mutex);

        // Consume item from the buffer
        item = buffer[out];
        printf("Consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        // Release the buffer
        sem_post(&mutex);
        // Signal that the buffer is no longer full
        sem_post(&empty);

        // Sleep for a random time to simulate variable consumption time
        usleep(rand() % 1000000);
    }
}

int main() {
    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, BUFFER_SIZE);

    // Create threads
    pthread_t producer_thread, consumer_thread;
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Wait for threads to finish (this won't happen in this example since the threads run indefinitely)
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&full);
    sem_destroy(&empty);

    return 0;
}
